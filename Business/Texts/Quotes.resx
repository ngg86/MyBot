<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="String" xml:space="preserve">
    <value>Baerl quote #1: Ye can ne'er hav' enough butter.</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>Baerl quote #2: Remember; Whene'er 'n Elf touches ye, it's not okay ta touch 'em back. Ever. Best go touch yeself.</value>
  </data>
  <data name="String10" xml:space="preserve">
    <value>Baerl quote #11: If it be brown, flush it down. Unless it be a mushroom. Be absolutely sure it be a mushroom afor a'eatin' it.</value>
  </data>
  <data name="String11" xml:space="preserve">
    <value>Baerl quote #12: I've eaten some very good dog food in my time.</value>
  </data>
  <data name="String12" xml:space="preserve">
    <value>Baerl quote #13: Remember; Should ye be pissin' blue; yer sister's cousin's neighbour's parrot's previous owner's siamese twin's adopted goblin's sister's, twice removed, employer's bathhouse is *not* the best place ta be pissin' in ta first place! Also I be hungry.</value>
  </data>
  <data name="String13" xml:space="preserve">
    <value>Baerl quote #14: One teaspoon ta relax. To tespun ta rlax more. Fri taspn t' s'gd'n'sf.</value>
  </data>
  <data name="String14" xml:space="preserve">
    <value>Baerl quote #15: *gasp* Don't look now, but I think I exist!</value>
  </data>
  <data name="String15" xml:space="preserve">
    <value>Baerl quote #16: I've got a jar of fog!</value>
  </data>
  <data name="String16" xml:space="preserve">
    <value>Baerl quote #17: C-can I borrow ye Mage Hand? It's fer.. *personal*.. reasons...</value>
  </data>
  <data name="String17" xml:space="preserve">
    <value>Baerl quote #18: Fear not people I Baerly know! Baerl is here!</value>
  </data>
  <data name="String18" xml:space="preserve">
    <value>Baerl quote #19: NO! That's *my* frog. Mine.</value>
  </data>
  <data name="String19" xml:space="preserve">
    <value>Baerl quote #20: Fer th' last time, Baerl not allowed ta get wet!</value>
  </data>
  <data name="String2" xml:space="preserve">
    <value>Baerl quote #3: Ye call tha' a hammer!? *This!* This is a- Okay, it's not a hammer, but just touch it. Please.</value>
  </data>
  <data name="String3" xml:space="preserve">
    <value>Baerl quote #4: What smells like burnin' pussy?</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>Baerl quote #5: Ye got any.. *chainmail*?</value>
  </data>
  <data name="String5" xml:space="preserve">
    <value>Baerl quote #6: Would ye like some tea? **I DON'T HAVE ANY TEA!**</value>
  </data>
  <data name="String6" xml:space="preserve">
    <value>Baerl quote #7: *Gibberish*</value>
  </data>
  <data name="String7" xml:space="preserve">
    <value>Baerl quote #8: If it be bubblin', it prob'ly be for drinkin'.</value>
  </data>
  <data name="String8" xml:space="preserve">
    <value>Baerl quote #9: I could fly if it were Tuesday!</value>
  </data>
  <data name="String9" xml:space="preserve">
    <value>Baerl quote #10: Crazy bastards, Dwarves. No point in tryin' ta understand tha' lot.</value>
  </data>
</root>